[transmogrifier]
pipeline =
    jsonsource
    logger
    skipper
    pathfixer
    content_type_mapper
    removeid
    split_off_collection_criterion
    savepoint

[split_off_collection_criterion]
blueprint = collective.transmogrifier.sections.splitter
pipeline-collection-condition = python:item['_type'] in ('ATBooleanCriterion',
                                                            'ATCurrentAuthorCriterion',
                                                            'ATDateCriteria',
                                                            'ATDateRangeCriterion',
                                                            'ATListCriterion',
                                                            'ATPathCriterion',
                                                            'ATPortalTypeCriterion',
                                                            'ATReferenceCriterion',
                                                            'ATRelativePathCriterion',
                                                            'ATSelectionCriterion',
                                                            'ATSimpleIntCriterion',
                                                            'ATSimpleStringCriterion',
                                                            'ATSortCriterion' )
pipeline-collection =
    collection_constructor
    collection_logger
pipeline-content-condition = not:${split_off_collection_criterion:pipeline-collection-condition}
pipeline-content = 
    fix_effective
    fix_expires
    fix_audioclip_file_field
    set_hide_featured_image
    videopath_fixer
    hubpage_fixer
    copy_keywords
    copy_byline
    copy_dateline
    copy_rights
    delete_workflow_from_images
    constructor
    copyuid
    deserializer
    schemaupdater
    featuredimage
    store_annotations
    workflowhistory
    
[jsonsource]
blueprint = collective.jsonmigrator.jsonsource
path = content-import

[logger]
blueprint = collective.transmogrifier.sections.logger
name = Transmogrifier [importing]
level = INFO
key = _path

[skipper]
blueprint = rfaplone4to5.skipper

[pathfixer]
blueprint = plone.app.transmogrifier.pathfixer
path-key = _path
stripstring = /rfa/subsites

[videopath_fixer]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
value = python:item['_path'].replace('/video/', '/video-import/')

[content_type_mapper]
blueprint = rfaplone4to5.content_type_mapper

[hubpage_fixer]
blueprint = rfaplone4to5.hubpage_fixer

[comment_constructor]
blueprint = rfaplone4to5.comment_constructor

[debugger]
blueprint = collective.transmogrifier.sections.breakpoint
condition = python:True

[removeid]
blueprint = collective.transmogrifier.sections.manipulator
delete = id

[fix_effective]
blueprint = collective.transmogrifier.sections.manipulator
keys = effectiveDate
destination = string:effective

[copy_keywords]
blueprint = collective.transmogrifier.sections.manipulator
keys = extended_keywords
destination = string:subjects

[copy_byline]
blueprint = collective.transmogrifier.sections.manipulator
keys = byline
destination = string:story_byline

[copy_dateline]
blueprint = collective.transmogrifier.sections.manipulator
keys = dateline
destination = string:story_dateline

[copy_rights]
blueprint = collective.transmogrifier.sections.manipulator
keys = copyright
destination = string:rights

[store_annotations]
blueprint = rfaplone4to5.annotate

[delete_workflow_from_images]
blueprint = collective.transmogrifier.sections.manipulator
delete = _workflow_history
condition = python:item['_type'] == "Image"

[fix_expires]
blueprint = collective.transmogrifier.sections.manipulator
keys = expirationDate
destination = string:expires

[fix_audioclip_file_field]
blueprint = collective.transmogrifier.sections.manipulator
keys = _datafield_file
destination = string:_datafield_audio_file
condition = python:item['_classname']=="AudioClip"

[set_hide_featured_image]
blueprint = collective.transmogrifier.sections.inserter
key = string:hide_featured_image
value = python:item.get('featured_image') is None
condition = python:item['_classname']=="Story"

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[copyuid]
blueprint = collective.transmogrifier.sections.manipulator
keys =
    _uid
destination = string:plone.uuid

[deserializer]
blueprint = transmogrify.dexterity.deserializer

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[featuredimage]
blueprint = rfaplone4to5.featuredimage_setter

[workflowhistory]
blueprint = collective.jsonmigrator.workflowhistory
workflowhistory-key = _workflow_history

[savepoint]
blueprint = collective.jsonmigrator.partialcommit
every = 1000


############### COLLECTION CRITERION SUBPIPE #############
[collection_constructor]
blueprint = rfaplone4to5.collection_migrator

[collection_logger]
blueprint = collective.transmogrifier.sections.logger
name = Transmogrifier [Constructing Collection]
level = INFO
key = _path
    